{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, signal } from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { catchError, tap, throwError } from 'rxjs';\nlet AuthService = class AuthService {\n  API_URL = environment.env.API_URL + '/auth';\n  _http = inject(HttpClient);\n  _accessToken = null;\n  _accessTokenExpiration = null;\n  currentUser = signal(null);\n  constructor() {}\n  register(request) {\n    return this._http.post(this.API_URL + '/register', request, {\n      withCredentials: true\n    }).pipe(tap(res => {\n      this._accessToken = res.token;\n      this.setCurrentUser(res.token);\n    }), catchError(error => {\n      this.clearAuthData();\n      return throwError(() => error);\n    }));\n  }\n  login(request) {\n    return this._http.post(this.API_URL + '/login', request, {\n      withCredentials: true\n    }).pipe(tap(res => {\n      this._accessToken = res.token;\n      this.setCurrentUser(res.token);\n    }), catchError(error => {\n      this.clearAuthData();\n      return throwError(() => error);\n    }));\n  }\n  googleLogin(googleToken) {\n    return this._http.post(this.API_URL + '/google-login', {\n      token: googleToken\n    }, {\n      withCredentials: true\n    }).pipe(tap(res => {\n      this._accessToken = res.token;\n      this.setCurrentUser(res.token);\n    }), catchError(error => {\n      this.clearAuthData();\n      return throwError(() => error);\n    }));\n  }\n  refreshToken() {\n    return this._http.post(this.API_URL + '/refresh', {}, {\n      withCredentials: true\n    }).pipe(tap(res => {\n      this._accessToken = res.token;\n      this.setCurrentUser(res.token);\n    }), catchError(error => {\n      this.clearAuthData();\n      return throwError(() => error);\n    }));\n  }\n  logout() {\n    return this._http.post(this.API_URL + '/logout', {}, {\n      withCredentials: true\n    }).pipe(tap(() => {\n      this.clearAuthData();\n      console.log('Logout successful (server-side)');\n    }), catchError(err => {\n      console.error('Logout error on server:', err);\n      this.clearAuthData();\n      return throwError(() => err);\n    }));\n  }\n  isAuthenticated() {\n    if (!this._accessToken) {\n      return false;\n    }\n    const now = Date.now();\n    return this._accessTokenExpiration ? this._accessTokenExpiration > now + 60 * 1000 : true;\n  }\n  setCurrentUser(token) {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const user = {\n        name: payload.name,\n        email: payload.sub\n      };\n      this.currentUser.set(user);\n      this._accessTokenExpiration = payload.exp * 1000;\n    } catch (e) {\n      console.error(e);\n      this.clearAuthData();\n    }\n  }\n  clearAuthData() {\n    this.currentUser.set(null);\n    this._accessTokenExpiration = null;\n    this._accessToken = null;\n  }\n  get authToken() {\n    return this._accessToken;\n  }\n  static ctorParameters = () => [];\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"names":["HttpClient","inject","Injectable","signal","environment","catchError","tap","throwError","AuthService","API_URL","env","_http","_accessToken","_accessTokenExpiration","currentUser","constructor","register","request","post","withCredentials","pipe","res","token","setCurrentUser","error","clearAuthData","login","googleLogin","googleToken","refreshToken","logout","console","log","err","isAuthenticated","now","Date","payload","JSON","parse","atob","split","user","name","email","sub","set","exp","e","authToken","__decorate","providedIn"],"sources":["/home/alejandro/Desktop/minot/minot-ui/src/app/auth/services/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, signal } from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { TokenResponse } from '../model/token-response';\nimport { RegisterRequest } from '../model/register-request';\nimport { LoginResquest } from '../model/login-resquest';\nimport { User } from '../../user/model/user';\nimport { catchError, tap, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private readonly API_URL = environment.env.API_URL + '/auth';\n  private _http = inject(HttpClient);\n  private _accessToken: string | null = null;\n  private _accessTokenExpiration: number | null = null;\n\n  currentUser = signal<User | null>(null);\n\n  constructor() {}\n\n  register(request: RegisterRequest) {\n    return this._http\n      .post<TokenResponse>(this.API_URL + '/register', request, {\n        withCredentials: true,\n      })\n      .pipe(\n        tap((res) => {\n          this._accessToken = res.token;\n          this.setCurrentUser(res.token);\n        }),\n        catchError((error) => {\n          this.clearAuthData();\n          return throwError(() => error);\n        })\n      );\n  }\n\n  login(request: LoginResquest) {\n    return this._http\n      .post<TokenResponse>(this.API_URL + '/login', request, {\n        withCredentials: true,\n      })\n      .pipe(\n        tap((res) => {\n          this._accessToken = res.token;\n          this.setCurrentUser(res.token);\n        }),\n        catchError((error) => {\n          this.clearAuthData();\n          return throwError(() => error);\n        })\n      );\n  }\n\n  googleLogin(googleToken: string) {\n    return this._http\n      .post<TokenResponse>(\n        this.API_URL + '/google-login',\n        {\n          token: googleToken,\n        },\n        { withCredentials: true }\n      )\n      .pipe(\n        tap((res) => {\n          this._accessToken = res.token;\n          this.setCurrentUser(res.token);\n        }),\n        catchError((error) => {\n          this.clearAuthData();\n          return throwError(() => error);\n        })\n      );\n  }\n\n  refreshToken() {\n    return this._http\n      .post<TokenResponse>(\n        this.API_URL + '/refresh',\n        {},\n        { withCredentials: true }\n      )\n      .pipe(\n        tap((res) => {\n          this._accessToken = res.token;\n          this.setCurrentUser(res.token);\n        }),\n        catchError((error) => {\n          this.clearAuthData();\n          return throwError(() => error);\n        })\n      );\n  }\n\n  logout() {\n    return this._http\n      .post<boolean>(this.API_URL + '/logout', {}, { withCredentials: true })\n      .pipe(\n        tap(() => {\n          this.clearAuthData();\n          console.log('Logout successful (server-side)');\n        }),\n        catchError((err) => {\n          console.error('Logout error on server:', err);\n          this.clearAuthData();\n          return throwError(() => err);\n        })\n      );\n  }\n\n  isAuthenticated(): boolean {\n    if (!this._accessToken) {\n      return false;\n    }\n    const now = Date.now();\n    return this._accessTokenExpiration ? this._accessTokenExpiration > now + (60 * 1000) : true;\n  }\n\n  private setCurrentUser(token: string) {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const user: User = {\n        name: payload.name,\n        email: payload.sub,\n      };\n      this.currentUser.set(user);\n      this._accessTokenExpiration = payload.exp * 1000;\n    } catch (e) {\n      console.error(e);\n      this.clearAuthData();\n    }\n  }\n\n  private clearAuthData() {\n    this.currentUser.set(null);\n    this._accessTokenExpiration = null;\n    this._accessToken = null;\n  }\n\n  get authToken() {\n    return this._accessToken;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}