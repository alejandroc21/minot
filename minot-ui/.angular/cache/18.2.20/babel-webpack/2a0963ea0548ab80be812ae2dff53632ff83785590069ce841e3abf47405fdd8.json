{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, signal } from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { catchError, tap, throwError } from 'rxjs';\nlet AuthService = class AuthService {\n  API_URL = environment.env.API_URL + '/auth';\n  _http = inject(HttpClient);\n  _accessToken = null;\n  _accessTokenExpiration = null;\n  currentUser = signal(null);\n  constructor() {}\n  register(request) {\n    return this._http.post(this.API_URL + '/register', request, {\n      withCredentials: true\n    }).pipe(tap(res => {\n      this._accessToken = res.token;\n      this.setCurrentUser(res.token);\n    }), catchError(error => {\n      this.clearAuthData();\n      return throwError(() => error);\n    }));\n  }\n  login(request) {\n    return this._http.post(this.API_URL + '/login', request, {\n      withCredentials: true\n    }).pipe(tap(res => {\n      this._accessToken = res.token;\n      this.setCurrentUser(res.token);\n    }), catchError(error => {\n      this.clearAuthData();\n      return throwError(() => error);\n    }));\n  }\n  googleLogin(googleToken) {\n    return this._http.post(this.API_URL + '/google-login', {\n      token: googleToken\n    }, {\n      withCredentials: true\n    }).pipe(tap(res => {\n      this._accessToken = res.token;\n      this.setCurrentUser(res.token);\n    }), catchError(error => {\n      this.clearAuthData();\n      return throwError(() => error);\n    }));\n  }\n  refreshToken() {\n    return this._http.post(this.API_URL + '/refresh', {}, {\n      withCredentials: true\n    }).pipe(tap(res => {\n      this._accessToken = res.token;\n      this.setCurrentUser(res.token);\n    }), catchError(error => {\n      this.clearAuthData();\n      return throwError(() => error);\n    }));\n  }\n  logout() {\n    return this._http.post(this.API_URL + '/logout', {}, {\n      withCredentials: true\n    }).pipe(tap(() => {\n      this.clearAuthData();\n      console.log('Logout successful (server-side)');\n    }), catchError(err => {\n      console.error('Logout error on server:', err);\n      this.clearAuthData();\n      return throwError(() => err);\n    }));\n  }\n  isAuthenticated() {\n    if (!this._accessToken) {\n      return false;\n    }\n    const now = Date.now();\n    return this._accessTokenExpiration ? this._accessTokenExpiration > now + 60 * 1000 : true;\n  }\n  setCurrentUser(token) {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const user = {\n        name: payload.name,\n        email: payload.sub\n      };\n      this.currentUser.set(user);\n      this._accessTokenExpiration = payload.exp * 1000;\n    } catch (e) {\n      console.error(e);\n      this.clearAuthData();\n    }\n  }\n  clearAuthData() {\n    this.currentUser.set(null);\n    this._accessTokenExpiration = null;\n    this._accessToken = null;\n  }\n  get authToken() {\n    return this._accessToken;\n  }\n  static ctorParameters = () => [];\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}