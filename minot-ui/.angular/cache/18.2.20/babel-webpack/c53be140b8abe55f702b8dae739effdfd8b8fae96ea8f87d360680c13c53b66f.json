{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { AuthService } from './auth.service';\nimport { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';\nimport { environment } from '../../../environments/environment';\ndescribe('AuthService', () => {\n  let service;\n  let httpMock;\n  const API_URL = environment.env.API_URL + '/auth';\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [AuthService, provideHttpClientTesting()]\n    });\n    service = TestBed.inject(AuthService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should register a user and set the token', () => {\n    const mockRequest = {\n      name: 'test user',\n      email: 'test@example.com',\n      password: '123456'\n    };\n    const mockToken = 'mock.jwt.token';\n    const mockResponse = {\n      token: mockToken\n    };\n    service.register(mockRequest).subscribe(res => {\n      expect(res.token).toEqual(mockToken);\n      expect(service.authToken).toEqual(mockToken);\n      console.log(service.currentUser());\n      expect(service.currentUser()).toEqual({\n        name: mockRequest.name,\n        email: mockRequest.email\n      });\n    });\n    const req = httpMock.expectOne(`${API_URL}/register`);\n    expect(req.request.method).toBe('POST');\n    expect(req.request.withCredentials).toBeTrue();\n    req.flush(mockResponse);\n  });\n});","map":{"version":3,"names":["TestBed","AuthService","HttpTestingController","provideHttpClientTesting","environment","describe","service","httpMock","API_URL","env","beforeEach","configureTestingModule","providers","inject","afterEach","verify","it","expect","toBeTruthy","mockRequest","name","email","password","mockToken","mockResponse","token","register","subscribe","res","toEqual","authToken","console","log","currentUser","req","expectOne","request","method","toBe","withCredentials","toBeTrue","flush"],"sources":["/home/alejandro/Desktop/minot/minot-ui/src/app/auth/services/auth.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\n\nimport { AuthService } from './auth.service';\nimport { HttpClientTestingModule, HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';\nimport { environment } from '../../../environments/environment';\nimport { TokenResponse } from '../model/token-response';\n\ndescribe('AuthService', () => {\n  let service: AuthService;\n  let httpMock: HttpTestingController;\n  const API_URL = environment.env.API_URL + '/auth';\n\n \n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers:[AuthService, provideHttpClientTesting()]\n    });\n    service = TestBed.inject(AuthService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(()=>{\n    httpMock.verify();\n  })\n  \n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n\n    it('should register a user and set the token', () => {\n    const mockRequest = { name:'test user', email: 'test@example.com', password: '123456' };\n    const mockToken = 'mock.jwt.token';\n    const mockResponse: TokenResponse = { token: mockToken };\n\n    service.register(mockRequest).subscribe((res) => {\n      expect(res.token).toEqual(mockToken);\n      expect(service.authToken).toEqual(mockToken);\n      console.log(service.currentUser());\n      \n      expect(service.currentUser()).toEqual({\n        name: mockRequest.name,\n        email: mockRequest.email,\n      });\n    });\n\n    const req = httpMock.expectOne(`${API_URL}/register`);\n    expect(req.request.method).toBe('POST');\n    expect(req.request.withCredentials).toBeTrue();\n    req.flush(mockResponse);\n  });\n\n});\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAE/C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAAkCC,qBAAqB,EAAEC,wBAAwB,QAAQ,8BAA8B;AACvH,SAASC,WAAW,QAAQ,mCAAmC;AAG/DC,QAAQ,CAAC,aAAa,EAAE,MAAK;EAC3B,IAAIC,OAAoB;EACxB,IAAIC,QAA+B;EACnC,MAAMC,OAAO,GAAGJ,WAAW,CAACK,GAAG,CAACD,OAAO,GAAG,OAAO;EAGjDE,UAAU,CAAC,MAAK;IACdV,OAAO,CAACW,sBAAsB,CAAC;MAC7BC,SAAS,EAAC,CAACX,WAAW,EAAEE,wBAAwB,EAAE;KACnD,CAAC;IACFG,OAAO,GAAGN,OAAO,CAACa,MAAM,CAACZ,WAAW,CAAC;IACrCM,QAAQ,GAAGP,OAAO,CAACa,MAAM,CAACX,qBAAqB,CAAC;EAClD,CAAC,CAAC;EAEFY,SAAS,CAAC,MAAI;IACZP,QAAQ,CAACQ,MAAM,EAAE;EACnB,CAAC,CAAC;EAEFC,EAAE,CAAC,mBAAmB,EAAE,MAAK;IAC3BC,MAAM,CAACX,OAAO,CAAC,CAACY,UAAU,EAAE;EAC9B,CAAC,CAAC;EAGAF,EAAE,CAAC,0CAA0C,EAAE,MAAK;IACpD,MAAMG,WAAW,GAAG;MAAEC,IAAI,EAAC,WAAW;MAAEC,KAAK,EAAE,kBAAkB;MAAEC,QAAQ,EAAE;IAAQ,CAAE;IACvF,MAAMC,SAAS,GAAG,gBAAgB;IAClC,MAAMC,YAAY,GAAkB;MAAEC,KAAK,EAAEF;IAAS,CAAE;IAExDjB,OAAO,CAACoB,QAAQ,CAACP,WAAW,CAAC,CAACQ,SAAS,CAAEC,GAAG,IAAI;MAC9CX,MAAM,CAACW,GAAG,CAACH,KAAK,CAAC,CAACI,OAAO,CAACN,SAAS,CAAC;MACpCN,MAAM,CAACX,OAAO,CAACwB,SAAS,CAAC,CAACD,OAAO,CAACN,SAAS,CAAC;MAC5CQ,OAAO,CAACC,GAAG,CAAC1B,OAAO,CAAC2B,WAAW,EAAE,CAAC;MAElChB,MAAM,CAACX,OAAO,CAAC2B,WAAW,EAAE,CAAC,CAACJ,OAAO,CAAC;QACpCT,IAAI,EAAED,WAAW,CAACC,IAAI;QACtBC,KAAK,EAAEF,WAAW,CAACE;OACpB,CAAC;IACJ,CAAC,CAAC;IAEF,MAAMa,GAAG,GAAG3B,QAAQ,CAAC4B,SAAS,CAAC,GAAG3B,OAAO,WAAW,CAAC;IACrDS,MAAM,CAACiB,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;IACvCrB,MAAM,CAACiB,GAAG,CAACE,OAAO,CAACG,eAAe,CAAC,CAACC,QAAQ,EAAE;IAC9CN,GAAG,CAACO,KAAK,CAACjB,YAAY,CAAC;EACzB,CAAC,CAAC;AAEJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}