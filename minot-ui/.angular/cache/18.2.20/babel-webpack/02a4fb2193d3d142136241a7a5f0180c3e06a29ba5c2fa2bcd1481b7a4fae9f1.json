{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./google-login.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./google-login.component.css?ngResource\";\nimport { Component, inject, NgZone, ViewChild } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { environment } from '../../../../environments/environment.development';\nimport { Router } from '@angular/router';\nlet GoogleLoginComponent = class GoogleLoginComponent {\n  clientId = environment.env.NG_APP_GOOGLE_CLIENT_ID;\n  _authService = inject(AuthService);\n  _router = inject(Router);\n  _ngZone = inject(NgZone);\n  googleBtn;\n  ngAfterViewInit() {\n    window.google.accounts.id.initialize({\n      client_id: this.clientId,\n      callback: res => {\n        this._ngZone.run(() => this.handleLogin(res.credential));\n      }\n    });\n    let w = window.innerWidth;\n    const width = w < 480 ? '290' : w < 768 ? '320' : '370';\n    window.google.accounts.id.renderButton(this.googleBtn.nativeElement, {\n      size: 'large',\n      shape: 'square',\n      width\n    });\n  }\n  handleLogin(googleToken) {\n    this._authService.googleLogin(googleToken).subscribe({\n      next: res => {\n        this._router.navigate(['/home']);\n      },\n      error: err => {\n        console.error(err);\n      }\n    });\n  }\n  static propDecorators = {\n    googleBtn: [{\n      type: ViewChild,\n      args: ['googleBtn', {\n        static: true\n      }]\n    }]\n  };\n};\nGoogleLoginComponent = __decorate([Component({\n  selector: 'app-google-login',\n  standalone: true,\n  imports: [],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], GoogleLoginComponent);\nexport { GoogleLoginComponent };","map":{"version":3,"names":["Component","inject","NgZone","ViewChild","AuthService","environment","Router","GoogleLoginComponent","clientId","env","NG_APP_GOOGLE_CLIENT_ID","_authService","_router","_ngZone","googleBtn","ngAfterViewInit","window","google","accounts","id","initialize","client_id","callback","res","run","handleLogin","credential","w","innerWidth","width","renderButton","nativeElement","size","shape","googleToken","googleLogin","subscribe","next","navigate","error","err","console","args","static","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["/home/alejandro/Desktop/minot/minot-ui/src/app/auth/components/google-login/google-login.component.ts"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, inject, NgZone, ViewChild } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { environment } from '../../../../environments/environment.development';\nimport { Router } from '@angular/router';\n\ndeclare global {\n  interface Window { google: any; }\n}\n\n@Component({\n  selector: 'app-google-login',\n  standalone: true,\n  imports: [],\n  templateUrl: './google-login.component.html',\n  styleUrl: './google-login.component.css',\n})\nexport class GoogleLoginComponent implements AfterViewInit{\n  private readonly clientId = environment.env.NG_APP_GOOGLE_CLIENT_ID;\n  private _authService = inject(AuthService);\n  private _router = inject(Router);\n  private _ngZone = inject(NgZone);\n  @ViewChild('googleBtn', { static: true }) googleBtn!: ElementRef<HTMLDivElement>;\n\n  ngAfterViewInit(): void {\n      window.google.accounts.id.initialize({\n      client_id: this.clientId,\n      callback: (res: any) => {\n        this._ngZone.run(() => this.handleLogin(res.credential));\n      }\n    });\n\n    let w = window.innerWidth;\n    const width = w < 480 ? '290' : w < 768 ? '320' : '370';\n\n    window.google.accounts.id.renderButton(\n      this.googleBtn.nativeElement,\n      {\n        size: 'large',\n        shape: 'square',\n        width,\n      }\n    );\n  }\n\n    handleLogin(googleToken: string) {\n    this._authService.googleLogin(googleToken).subscribe({\n      next: (res) => {\n        this._router.navigate(['/home']);\n      },\n      error: (err) => {\n        console.error(err);\n      },\n    });\n  }\n}\n"],"mappings":";;;AAAA,SAAwBA,SAAS,EAAcC,MAAM,EAAEC,MAAM,EAAEC,SAAS,QAAQ,eAAe;AAC/F,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,WAAW,QAAQ,kDAAkD;AAC9E,SAASC,MAAM,QAAQ,iBAAiB;AAajC,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EACdC,QAAQ,GAAGH,WAAW,CAACI,GAAG,CAACC,uBAAuB;EAC3DC,YAAY,GAAGV,MAAM,CAACG,WAAW,CAAC;EAClCQ,OAAO,GAAGX,MAAM,CAACK,MAAM,CAAC;EACxBO,OAAO,GAAGZ,MAAM,CAACC,MAAM,CAAC;EACUY,SAAS;EAEnDC,eAAeA,CAAA;IACXC,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACC,UAAU,CAAC;MACrCC,SAAS,EAAE,IAAI,CAACb,QAAQ;MACxBc,QAAQ,EAAGC,GAAQ,IAAI;QACrB,IAAI,CAACV,OAAO,CAACW,GAAG,CAAC,MAAM,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,UAAU,CAAC,CAAC;MAC1D;KACD,CAAC;IAEF,IAAIC,CAAC,GAAGX,MAAM,CAACY,UAAU;IACzB,MAAMC,KAAK,GAAGF,CAAC,GAAG,GAAG,GAAG,KAAK,GAAGA,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,KAAK;IAEvDX,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACW,YAAY,CACpC,IAAI,CAAChB,SAAS,CAACiB,aAAa,EAC5B;MACEC,IAAI,EAAE,OAAO;MACbC,KAAK,EAAE,QAAQ;MACfJ;KACD,CACF;EACH;EAEEJ,WAAWA,CAACS,WAAmB;IAC/B,IAAI,CAACvB,YAAY,CAACwB,WAAW,CAACD,WAAW,CAAC,CAACE,SAAS,CAAC;MACnDC,IAAI,EAAGd,GAAG,IAAI;QACZ,IAAI,CAACX,OAAO,CAAC0B,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAClC,CAAC;MACDC,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAACC,GAAG,CAAC;MACpB;KACD,CAAC;EACJ;;;YAhCCrC,SAAS;MAAAuC,IAAA,GAAC,WAAW,EAAE;QAAEC,MAAM,EAAE;MAAI,CAAE;IAAA;;;AAL7BpC,oBAAoB,GAAAqC,UAAA,EAPhC5C,SAAS,CAAC;EACT6C,QAAQ,EAAE,kBAAkB;EAC5BC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,EAAE;EACXC,QAAA,EAAAC,oBAA4C;;CAE7C,CAAC,C,EACW1C,oBAAoB,CAsChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}