{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { AuthService } from './auth.service';\nimport { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';\nimport { environment } from '../../../environments/environment';\ndescribe('AuthService', () => {\n  let service;\n  let httpMock;\n  const API_URL = environment.env.API_URL + '/auth';\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [AuthService, provideHttpClientTesting()]\n    });\n    service = TestBed.inject(AuthService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should register a user and set the token', () => {\n    const mockRequest = {\n      name: 'test user',\n      email: 'test@example.com',\n      password: '123456'\n    };\n    const mockToken = 'mock.jwt.token';\n    const mockResponse = {\n      token: mockToken\n    };\n    service.register(mockRequest).subscribe(res => {\n      expect(res.token).toEqual(mockToken);\n      expect(service.authToken).toEqual(mockToken);\n      console.log(service.currentUser());\n      expect(service.currentUser()).toEqual({\n        name: mockRequest.name,\n        email: mockRequest.email\n      });\n    });\n    const req = httpMock.expectOne(`${API_URL}/register`);\n    expect(req.request.method).toBe('POST');\n    expect(req.request.withCredentials).toBeTrue();\n    req.flush(mockResponse);\n  });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}